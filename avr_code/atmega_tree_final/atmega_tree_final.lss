
./atmega_tree_final.o:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e9       	ldi	r30, 0x96	; 150
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 32       	cpi	r26, 0x26	; 38
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <main>
  9e:	0c 94 c9 01 	jmp	0x392	; 0x392 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_11>:
int pos=0;
int direction=1;	
int i;

ISR (TIMER1_COMPA_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	af 93       	push	r26
  b6:	bf 93       	push	r27
    timer1_millis++;
  b8:	80 91 22 01 	lds	r24, 0x0122
  bc:	90 91 23 01 	lds	r25, 0x0123
  c0:	a0 91 24 01 	lds	r26, 0x0124
  c4:	b0 91 25 01 	lds	r27, 0x0125
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	a1 1d       	adc	r26, r1
  cc:	b1 1d       	adc	r27, r1
  ce:	80 93 22 01 	sts	0x0122, r24
  d2:	90 93 23 01 	sts	0x0123, r25
  d6:	a0 93 24 01 	sts	0x0124, r26
  da:	b0 93 25 01 	sts	0x0125, r27
}
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  f0:	f8 94       	cli
{
  unsigned long millis_return;

  ATOMIC_BLOCK(ATOMIC_FORCEON) // Ensure this cannot be disrupted
  { 
  millis_return = timer1_millis;
  f2:	60 91 22 01 	lds	r22, 0x0122
  f6:	70 91 23 01 	lds	r23, 0x0123
  fa:	80 91 24 01 	lds	r24, 0x0124
  fe:	90 91 25 01 	lds	r25, 0x0125
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 102:	78 94       	sei
  }
 
  return millis_return;
}
 104:	08 95       	ret

00000106 <button>:

void button(void)
{
  if (bit_is_clear(PINB, 0))
 106:	18 99       	sbic	0x03, 0	; 3
 108:	2f c0       	rjmp	.+94     	; 0x168 <button+0x62>
  {
    Pressed_Confidence_Level ++; //Increase Pressed Conficence
 10a:	80 91 0c 01 	lds	r24, 0x010C
 10e:	90 91 0d 01 	lds	r25, 0x010D
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	90 93 0d 01 	sts	0x010D, r25
 118:	80 93 0c 01 	sts	0x010C, r24
    Released_Confidence_Level = 0; //Reset released button confidence since there is a button press
 11c:	10 92 0b 01 	sts	0x010B, r1
 120:	10 92 0a 01 	sts	0x010A, r1
    if (Pressed_Confidence_Level >500) //Indicator of good button press
 124:	85 3f       	cpi	r24, 0xF5	; 245
 126:	91 40       	sbci	r25, 0x01	; 1
 128:	bc f1       	brlt	.+110    	; 0x198 <button+0x92>
    {
      if (Pressed == 0)
 12a:	80 91 0e 01 	lds	r24, 0x010E
 12e:	90 91 0f 01 	lds	r25, 0x010F
 132:	89 2b       	or	r24, r25
 134:	a1 f4       	brne	.+40     	; 0x15e <button+0x58>
      {
        // Do stuff here
        buttonPushCounter++;
 136:	80 91 08 01 	lds	r24, 0x0108
 13a:	90 91 09 01 	lds	r25, 0x0109
 13e:	01 96       	adiw	r24, 0x01	; 1
        if (buttonPushCounter == 3) 
 140:	83 30       	cpi	r24, 0x03	; 3
 142:	91 05       	cpc	r25, r1
 144:	11 f4       	brne	.+4      	; 0x14a <button+0x44>
        {
          buttonPushCounter = 1;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 09 01 	sts	0x0109, r25
 14e:	80 93 08 01 	sts	0x0108, r24
        }
          Pressed = 1;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	90 93 0f 01 	sts	0x010F, r25
 15a:	80 93 0e 01 	sts	0x010E, r24
        }
        //Zero it so a new pressed condition can be evaluated
        Pressed_Confidence_Level = 0;
 15e:	10 92 0d 01 	sts	0x010D, r1
 162:	10 92 0c 01 	sts	0x010C, r1
 166:	08 95       	ret
    }
  }

  else
  {
    Released_Confidence_Level ++; //This works just like the pressed
 168:	80 91 0a 01 	lds	r24, 0x010A
 16c:	90 91 0b 01 	lds	r25, 0x010B
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	90 93 0b 01 	sts	0x010B, r25
 176:	80 93 0a 01 	sts	0x010A, r24
    Pressed_Confidence_Level = 0; //Reset pressed button confidence since the button is released
 17a:	10 92 0d 01 	sts	0x010D, r1
 17e:	10 92 0c 01 	sts	0x010C, r1
    if (Released_Confidence_Level >500)
 182:	85 3f       	cpi	r24, 0xF5	; 245
 184:	91 40       	sbci	r25, 0x01	; 1
 186:	44 f0       	brlt	.+16     	; 0x198 <button+0x92>
    {
      Pressed = 0;
 188:	10 92 0f 01 	sts	0x010F, r1
 18c:	10 92 0e 01 	sts	0x010E, r1
      Released_Confidence_Level = 0;
 190:	10 92 0b 01 	sts	0x010B, r1
 194:	10 92 0a 01 	sts	0x010A, r1
 198:	08 95       	ret

0000019a <colourChange>:
    }
  }
}

void colourChange(void)
{
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17

  if (buttonPushCounter == 1) 
 19e:	80 91 08 01 	lds	r24, 0x0108
 1a2:	90 91 09 01 	lds	r25, 0x0109
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	09 f0       	breq	.+2      	; 0x1ac <colourChange+0x12>
 1aa:	84 c0       	rjmp	.+264    	; 0x2b4 <colourChange+0x11a>
  {
    if (millis() >= flashSince1)
 1ac:	0e 94 78 00 	call	0xf0	; 0xf0 <millis>
 1b0:	00 91 10 01 	lds	r16, 0x0110
 1b4:	10 91 11 01 	lds	r17, 0x0111
 1b8:	20 91 12 01 	lds	r18, 0x0112
 1bc:	30 91 13 01 	lds	r19, 0x0113
 1c0:	60 17       	cp	r22, r16
 1c2:	71 07       	cpc	r23, r17
 1c4:	82 07       	cpc	r24, r18
 1c6:	93 07       	cpc	r25, r19
 1c8:	08 f4       	brcc	.+2      	; 0x1cc <colourChange+0x32>
 1ca:	74 c0       	rjmp	.+232    	; 0x2b4 <colourChange+0x11a>
    {
    for (i=0; i<pos; i++) 
 1cc:	10 92 21 01 	sts	0x0121, r1
 1d0:	10 92 20 01 	sts	0x0120, r1
 1d4:	20 91 20 01 	lds	r18, 0x0120
 1d8:	30 91 21 01 	lds	r19, 0x0121
 1dc:	80 91 06 01 	lds	r24, 0x0106
 1e0:	90 91 07 01 	lds	r25, 0x0107
 1e4:	28 17       	cp	r18, r24
 1e6:	39 07       	cpc	r19, r25
 1e8:	84 f4       	brge	.+32     	; 0x20a <colourChange+0x70>
      ws2812_sendarray((uint8_t *)&led[0],3);			// Repeatedly send "Green" to the led string. 
 1ea:	63 e0       	ldi	r22, 0x03	; 3
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	84 e1       	ldi	r24, 0x14	; 20
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 c6 01 	call	0x38c	; 0x38c <ws2812_sendarray>

  if (buttonPushCounter == 1) 
  {
    if (millis() >= flashSince1)
    {
    for (i=0; i<pos; i++) 
 1f6:	80 91 20 01 	lds	r24, 0x0120
 1fa:	90 91 21 01 	lds	r25, 0x0121
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	90 93 21 01 	sts	0x0121, r25
 204:	80 93 20 01 	sts	0x0120, r24
 208:	e5 cf       	rjmp	.-54     	; 0x1d4 <colourChange+0x3a>
      ws2812_sendarray((uint8_t *)&led[0],3);			// Repeatedly send "Green" to the led string. 

    for (i=0; i<(7-pos); i++) 
 20a:	10 92 21 01 	sts	0x0121, r1
 20e:	10 92 20 01 	sts	0x0120, r1
 212:	80 91 06 01 	lds	r24, 0x0106
 216:	90 91 07 01 	lds	r25, 0x0107
 21a:	27 e0       	ldi	r18, 0x07	; 7
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	28 1b       	sub	r18, r24
 220:	39 0b       	sbc	r19, r25
 222:	40 91 20 01 	lds	r20, 0x0120
 226:	50 91 21 01 	lds	r21, 0x0121
 22a:	42 17       	cp	r20, r18
 22c:	53 07       	cpc	r21, r19
 22e:	84 f4       	brge	.+32     	; 0x250 <colourChange+0xb6>
      ws2812_sendarray((uint8_t *)&led[1],3);			// Red
 230:	63 e0       	ldi	r22, 0x03	; 3
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	87 e1       	ldi	r24, 0x17	; 23
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	0e 94 c6 01 	call	0x38c	; 0x38c <ws2812_sendarray>
    if (millis() >= flashSince1)
    {
    for (i=0; i<pos; i++) 
      ws2812_sendarray((uint8_t *)&led[0],3);			// Repeatedly send "Green" to the led string. 

    for (i=0; i<(7-pos); i++) 
 23c:	80 91 20 01 	lds	r24, 0x0120
 240:	90 91 21 01 	lds	r25, 0x0121
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	90 93 21 01 	sts	0x0121, r25
 24a:	80 93 20 01 	sts	0x0120, r24
 24e:	e1 cf       	rjmp	.-62     	; 0x212 <colourChange+0x78>
      ws2812_sendarray((uint8_t *)&led[1],3);			// Red
    
    pos+=direction;		
 250:	20 91 00 01 	lds	r18, 0x0100
 254:	30 91 01 01 	lds	r19, 0x0101
 258:	82 0f       	add	r24, r18
 25a:	93 1f       	adc	r25, r19
 25c:	90 93 07 01 	sts	0x0107, r25
 260:	80 93 06 01 	sts	0x0106, r24
    if ((pos==7)||(pos==0)) direction=-direction;
 264:	87 30       	cpi	r24, 0x07	; 7
 266:	91 05       	cpc	r25, r1
 268:	11 f0       	breq	.+4      	; 0x26e <colourChange+0xd4>
 26a:	89 2b       	or	r24, r25
 26c:	39 f4       	brne	.+14     	; 0x27c <colourChange+0xe2>
 26e:	31 95       	neg	r19
 270:	21 95       	neg	r18
 272:	31 09       	sbc	r19, r1
 274:	30 93 01 01 	sts	0x0101, r19
 278:	20 93 00 01 	sts	0x0100, r18

    flashSince1 += flashWaitTime;
 27c:	80 91 10 01 	lds	r24, 0x0110
 280:	90 91 11 01 	lds	r25, 0x0111
 284:	a0 91 12 01 	lds	r26, 0x0112
 288:	b0 91 13 01 	lds	r27, 0x0113
 28c:	40 91 02 01 	lds	r20, 0x0102
 290:	50 91 03 01 	lds	r21, 0x0103
 294:	60 91 04 01 	lds	r22, 0x0104
 298:	70 91 05 01 	lds	r23, 0x0105
 29c:	84 0f       	add	r24, r20
 29e:	95 1f       	adc	r25, r21
 2a0:	a6 1f       	adc	r26, r22
 2a2:	b7 1f       	adc	r27, r23
 2a4:	80 93 10 01 	sts	0x0110, r24
 2a8:	90 93 11 01 	sts	0x0111, r25
 2ac:	a0 93 12 01 	sts	0x0112, r26
 2b0:	b0 93 13 01 	sts	0x0113, r27
    }
  }
} 
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	08 95       	ret

000002ba <main>:

int main(void)
{
  DDRB |= 1 << PB2; // Set PB3 as output
 2ba:	22 9a       	sbi	0x04, 2	; 4
  DDRB &= ~(1 << PB0); // Set PB2 as input
 2bc:	20 98       	cbi	0x04, 0	; 4
  PORTB |= 1 << PB0; // Set PB2 as input
 2be:	28 9a       	sbi	0x05, 0	; 5

  TCCR1B |= (1 << WGM12) | (1 << CS11); // CTC mode, Clock/8
 2c0:	80 91 81 00 	lds	r24, 0x0081
 2c4:	8a 60       	ori	r24, 0x0A	; 10
 2c6:	80 93 81 00 	sts	0x0081, r24
 
  OCR1AH = (CTC_MATCH_OVERFLOW >> 8); // Load the high byte, then the low byte into the output compare
 2ca:	87 e0       	ldi	r24, 0x07	; 7
 2cc:	80 93 89 00 	sts	0x0089, r24
  OCR1AL = (unsigned char) CTC_MATCH_OVERFLOW; // Added (unsigned char)
 2d0:	80 ed       	ldi	r24, 0xD0	; 208
 2d2:	80 93 88 00 	sts	0x0088, r24
 
  TIMSK1 |= (1 << OCIE1A); // Enable the compare match interrupt
 2d6:	80 91 6f 00 	lds	r24, 0x006F
 2da:	82 60       	ori	r24, 0x02	; 2
 2dc:	80 93 6f 00 	sts	0x006F, r24
    
  sei(); // Now enable global interrupts
 2e0:	78 94       	sei

  DDRB|=(1 << PB1);
 2e2:	21 9a       	sbi	0x04, 1	; 4

  led[0].r=00;led[0].g=255;led[0].b=00;		// LED 0 is Green
 2e4:	10 92 15 01 	sts	0x0115, r1
 2e8:	8f ef       	ldi	r24, 0xFF	; 255
 2ea:	80 93 14 01 	sts	0x0114, r24
 2ee:	10 92 16 01 	sts	0x0116, r1
  led[1].r=255;led[1].g=00;led[1].b=00;		// LED 1 is Red
 2f2:	80 93 18 01 	sts	0x0118, r24
 2f6:	10 92 17 01 	sts	0x0117, r1
 2fa:	10 92 19 01 	sts	0x0119, r1
  led[2].r=00;led[2].g=00;led[2].b=255;		// LED 2 is Blue
 2fe:	10 92 1b 01 	sts	0x011B, r1
 302:	10 92 1a 01 	sts	0x011A, r1
 306:	80 93 1c 01 	sts	0x011C, r24
  led[3].r=00;led[3].g=00;led[3].b=00;		// LED 3 is Off
 30a:	10 92 1e 01 	sts	0x011E, r1
 30e:	10 92 1d 01 	sts	0x011D, r1
 312:	10 92 1f 01 	sts	0x011F, r1

  while (1)
  {
  button();
 316:	0e 94 83 00 	call	0x106	; 0x106 <button>
  colourChange();
 31a:	0e 94 cd 00 	call	0x19a	; 0x19a <colourChange>
 31e:	fb cf       	rjmp	.-10     	; 0x316 <main+0x5c>

00000320 <ws2812_sendarray_mask>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  masklo	=~maskhi&ws2812_PORTREG;
 320:	35 b1       	in	r19, 0x05	; 5
 322:	24 2f       	mov	r18, r20
 324:	20 95       	com	r18
 326:	23 23       	and	r18, r19
  maskhi |=        ws2812_PORTREG;
 328:	35 b1       	in	r19, 0x05	; 5
 32a:	34 2b       	or	r19, r20
  sreg_prev=SREG;
 32c:	4f b7       	in	r20, 0x3f	; 63
  cli();  
 32e:	f8 94       	cli
 330:	fc 01       	movw	r30, r24
 332:	68 0f       	add	r22, r24
 334:	79 1f       	adc	r23, r25

  while (datlen--) {
 336:	e6 17       	cp	r30, r22
 338:	f7 07       	cpc	r31, r23
 33a:	89 f0       	breq	.+34     	; 0x35e <loop21+0x1e>
    curbyte=*data++;
 33c:	81 91       	ld	r24, Z+
    
    asm volatile(
 33e:	98 e0       	ldi	r25, 0x08	; 8

00000340 <loop21>:
 340:	35 b9       	out	0x05, r19	; 5
 342:	00 00       	nop
 344:	00 c0       	rjmp	.+0      	; 0x346 <loop21+0x6>
 346:	87 ff       	sbrs	r24, 7
 348:	25 b9       	out	0x05, r18	; 5
 34a:	88 0f       	add	r24, r24
 34c:	00 00       	nop
 34e:	00 c0       	rjmp	.+0      	; 0x350 <loop21+0x10>
 350:	00 c0       	rjmp	.+0      	; 0x352 <loop21+0x12>
 352:	00 c0       	rjmp	.+0      	; 0x354 <loop21+0x14>
 354:	25 b9       	out	0x05, r18	; 5
 356:	00 c0       	rjmp	.+0      	; 0x358 <loop21+0x18>
 358:	9a 95       	dec	r25
 35a:	91 f7       	brne	.-28     	; 0x340 <loop21>
 35c:	ec cf       	rjmp	.-40     	; 0x336 <ws2812_sendarray_mask+0x16>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 35e:	4f bf       	out	0x3f, r20	; 63
 360:	08 95       	ret

00000362 <ws2812_setleds_pin>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_DDRREG |= pinmask; // Enable DDR
 362:	24 b1       	in	r18, 0x04	; 4
 364:	24 2b       	or	r18, r20
 366:	24 b9       	out	0x04, r18	; 4
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
 368:	9b 01       	movw	r18, r22
 36a:	22 0f       	add	r18, r18
 36c:	33 1f       	adc	r19, r19
 36e:	26 0f       	add	r18, r22
 370:	37 1f       	adc	r19, r23
 372:	b9 01       	movw	r22, r18
 374:	0e 94 90 01 	call	0x320	; 0x320 <ws2812_sendarray_mask>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 378:	87 ec       	ldi	r24, 0xC7	; 199
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <ws2812_setleds_pin+0x1a>
 380:	00 c0       	rjmp	.+0      	; 0x382 <ws2812_setleds_pin+0x20>
 382:	00 00       	nop
 384:	08 95       	ret

00000386 <ws2812_setleds>:
#include <avr/io.h>
#include <util/delay.h>
 
void inline ws2812_setleds(struct cRGB *ledarray, uint16_t leds)
{
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
 386:	42 e0       	ldi	r20, 0x02	; 2
 388:	0c 94 b1 01 	jmp	0x362	; 0x362 <ws2812_setleds_pin>

0000038c <ws2812_sendarray>:
  _delay_us(50);
}

void ws2812_sendarray(uint8_t *data,uint16_t datlen)
{
  ws2812_sendarray_mask(data,datlen,_BV(ws2812_pin));
 38c:	42 e0       	ldi	r20, 0x02	; 2
 38e:	0c 94 90 01 	jmp	0x320	; 0x320 <ws2812_sendarray_mask>

00000392 <_exit>:
 392:	f8 94       	cli

00000394 <__stop_program>:
 394:	ff cf       	rjmp	.-2      	; 0x394 <__stop_program>
